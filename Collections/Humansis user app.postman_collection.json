{
	"info": {
		"_postman_id": "8bb147e6-e91f-4fee-8da6-d9244d42b0fb",
		"name": "Humansis user app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Salt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d672dabc-e380-49dc-bd16-74b8f773cbd0",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"wsse_salt\", jsonData.salt);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							}
						],
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/salt/{{wsse_user}}",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"salt",
								"{{wsse_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									"const password = pm.environment.get(\"wsse_password\");",
									"const salt = pm.environment.get(\"wsse_salt\");",
									"",
									"pm.environment.set(\"wsse_salted_password\", saltedPassword(password, salt));",
									"",
									"function saltedPassword(password, salt) {",
									"\tconst salted = password + '{' + salt + '}';",
									"\t",
									"\tlet digest = CryptoJS.SHA512(salted).toString(CryptoJS.enc.Hex);",
									"",
									"\tfor(var i = 1; i <= 4999; i++) {",
									"\t\tlet newInput = Buffer.concat([",
									"\t\t\tBuffer.from(digest, 'hex'), ",
									"\t\t\tBuffer.from(salted, 'utf8')",
									"\t\t]);",
									"\t\t",
									"\t    const wordArray = CryptoJS.lib.WordArray.create(newInput);",
									"\t    digest = CryptoJS.SHA512(wordArray).toString(CryptoJS.enc.Hex);",
									"\t}",
									"\treturn Buffer.from(digest, 'hex').toString('base64');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "daf0b686-6c71-4af6-ae39-c0e53412596a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\":\"{{wsse_user}}\",\n\t\"password\":\"{{wsse_salted_password}}\"\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/login",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Projects",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/projects",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Beneficiaries",
			"item": [
				{
					"name": "Beneficiaries by distribution",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/distributions/{{distribution_id}}/beneficiaries",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"distributions",
								"{{distribution_id}}",
								"beneficiaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Beneficiary by its smartcard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/smartcards/{{smartcard_serial_number}}/beneficiary",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"smartcards",
								"{{smartcard_serial_number}}",
								"beneficiary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Beneficiary Referral",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{beneficiary_id}},\n\t\"referral_comment\":\"test\",\n\t\"referral_type\":5\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/beneficiaries/{{beneficiary_id}}",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"beneficiaries",
								"{{beneficiary_id}}"
							]
						},
						"description": "enum class ReferralType(\r\n    @StringRes val textId: Int\r\n) {\r\n    @SerializedName(\"1\") HEALTH(R.string.referral_type_health),\r\n    @SerializedName(\"2\") PROTECTION(R.string.referral_type_protection),\r\n    @SerializedName(\"3\") SHELTER(R.string.referral_type_shelter),\r\n    @SerializedName(\"4\") NUTRITION(R.string.referral_type_nutrition),\r\n    @SerializedName(\"5\") OTHER(R.string.referral_type_other);\r\n}"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Distributions",
			"item": [
				{
					"name": "Distributions by Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/projects/{{project_id}}/distributions",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"projects",
								"{{project_id}}",
								"distributions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set as distributed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        6\n    ]\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/distributions/generalrelief/distributed",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"distributions",
								"generalrelief",
								"distributed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Booklet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cdce028-0ed8-4653-a725-f4398ed40b0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"KHM_Integra PT_05-02-2021_batch000002\"\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/booklets/assign/{{distribution_id}} /{{beneficiary_id}}",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"booklets",
								"assign",
								"{{distribution_id}} ",
								"{{beneficiary_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "137dd2d1-83af-4066-a907-1dddabb5138d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d0b8b829-f0bd-4954-971c-eb581728fa39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Smartcard",
			"item": [
				{
					"name": "Assign Smartcard",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"beneficiaryId\": {{beneficiary_id}},\n\t\"serialNumber\": \"{{smartcard_serial_number}}\",\n    \"createdAt\": \"2020-02-02T12:00:00+0200\"\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/smartcards",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"smartcards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribute Smartcard",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"distributionId\": {{distribution_id}},\n\t\"value\": 1.0,\n    \"createdAt\": \"2020-02-02T12:00:00+0200\"\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/smartcards/{{smartcard_serial_number}}/deposit",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"smartcards",
								"{{smartcard_serial_number}}",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Smartcard",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "country",
								"type": "text",
								"value": "{{country}}"
							},
							{
								"key": "x-wsse",
								"type": "text",
								"value": "{{wsse_header}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"state\":\"inactive\",\n    \"createdAt\": \"2020-02-02T12:00:00+0200\"\n}"
						},
						"url": {
							"raw": "{{prefix}}{{base_url}}/{{api}}/{{firewall}}/offline-app/v1/smartcards/{{smartcard_serial_number}}",
							"host": [
								"{{prefix}}{{base_url}}"
							],
							"path": [
								"{{api}}",
								"{{firewall}}",
								"offline-app",
								"v1",
								"smartcards",
								"{{smartcard_serial_number}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b8d57f2d-4fc6-4d87-913d-7831a254dc51",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "976d4888-52a1-443e-9cd1-09a2333f5816",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f4c62cbf-bdca-4b5b-a264-4488ad91e370",
				"type": "text/javascript",
				"exec": [
					"const user = pm.variables.get(\"wsse_user\");",
					"const password = pm.variables.get(\"wsse_password\");",
					"const salt = pm.variables.get(\"wsse_salt\");",
					"const header = getWsseHeader(user, password, salt);",
					"",
					"pm.environment.set(\"wsse_header\", header);",
					"",
					"function iso8601(time) {",
					"    return time.toISOString().split('.')[0] + 'Z';",
					"}",
					"",
					"function saltedPassword(password, salt) {",
					"    const salted = password + '{' + salt + '}';",
					"    ",
					"    let digest = CryptoJS.SHA512(salted).toString(CryptoJS.enc.Hex);",
					"",
					"    for(var i = 1; i <= 4999; i++) {",
					"        let newInput = Buffer.concat([",
					"            Buffer.from(digest, 'hex'), ",
					"            Buffer.from(salted, 'utf8')",
					"        ]);",
					"        ",
					"        const wordArray = CryptoJS.lib.WordArray.create(newInput);",
					"        digest = CryptoJS.SHA512(wordArray).toString(CryptoJS.enc.Hex);",
					"    }",
					"    return Buffer.from(digest, 'hex').toString('base64');",
					"}",
					"",
					"function hashSHA1(s) {",
					"    const byteArray = Buffer.from(s, 'utf8');",
					"    var wordArray = CryptoJS.lib.WordArray.create(byteArray);",
					"",
					"    return CryptoJS.SHA1(wordArray).toString(CryptoJS.enc.Base64);",
					"}",
					"",
					"function generateRandonNonce(){",
					"    var chars = \"0123456789abcdef\";",
					"\tvar randomString = '';",
					"",
					"\tfor (var i=0; i<16; i++) {",
					"\t\tvar rnum = Math.floor(Math.random() * chars.length);",
					"\t\trandomString += chars.substring(rnum,rnum+1);",
					"\t}",
					"\t",
					"\treturn randomString;",
					"}",
					"",
					"function getWsseHeader(user, password, salt) {",
					"    const timestamp = iso8601(new Date());    ",
					"    const nonce = generateRandonNonce();",
					"    var sPassword = saltedPassword(password, salt);",
					"",
					"    const mix = (nonce + timestamp + sPassword);",
					"    const digest = hashSHA1(mix);",
					"    ",
					"    const nonce64 = Buffer.from(nonce, 'utf8').toString(\"base64\");",
					"    ",
					"    console.log(`UsernameToken Username=\"${user}\", PasswordDigest=\"${digest}\", Nonce=\"${nonce64}\", Created=\"${timestamp}\"`);",
					"    return `UsernameToken Username=\"${user}\", PasswordDigest=\"${digest}\", Nonce=\"${nonce64}\", Created=\"${timestamp}\"`;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d5db017-efaf-4150-80a2-1d0752ec3e6f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4d36e7c5-693e-4692-bee6-d183750b3b09",
			"key": "project_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "7ad07752-ebbd-490a-bb94-5d3e9679d398",
			"key": "distribution_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "158b457e-634d-4b7a-b735-f8c2ae851d53",
			"key": "beneficiary_id",
			"value": "",
			"type": "string"
		},
		{
			"id": "76e4a102-1a1d-4e5c-afa1-9d6f94326670",
			"key": "smartcard_serial_number",
			"value": "",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}